name: Release
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
  workflow_dispatch:

jobs:
  run_if:
    if:  startsWith(github.head_ref, 'releases/')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check Version from Package File
        id: get-version 
        run: |
          PACKAGE_VERSION=$(node -p -e '`${require("./package.json").version}`')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          if git show-ref --tags --verify --quiet "refs/tags/$PACKAGE_VERSION"; then
            MSG="❌ package.json version $PACKAGE_VERSION is already used. Associated tag already exists."
          else
            MSG="✅ package.json version $PACKAGE_VERSION is not already used."
          fi
          echo $MSG
          echo "COMMENT=$MSG" >> $GITHUB_ENV
          
      - name: Check Version of Release Branch
        if:  startsWith(github.head_ref, 'releases/')
        run: |
          BRANCH_VERSION=$(echo $GITHUB_HEAD_REF | sed 's/releases\///g')
          echo "BRANCH_VERSION=$BRANCH_VERSION" >> $GITHUB_ENV
          if git show-ref --tags --verify --quiet "refs/tags/$BRANCH_VERSION"; then
            MSG1="❌ version from branch $BRANCH_VERSION is already used. Associated tag already exists."
          else
            MSG1="✅ version from branch $BRANCH_VERSION is not already used."
          fi
          echo $MSG1
          if [[ "$BRANCH_VERSION" != "${{ env.PACKAGE_VERSION }}" ]]; then
            MSG2="❌ package.json version ${{ env.PACKAGE_VERSION }} does not match branch version $BRANCH_VERSION"
          else
            MSG2="✅ package.json version ${{ env.PACKAGE_VERSION }} match the branch version $BRANCH_VERSION"
          fi
          echo $MSG2
          echo "COMMENT=$COMMENT\n$MSG1\n$MSG2" >> $GITHUB_ENV  
          
      - name: Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })
  
            // Find if comment was already made by the bot.                                                                                                    
            const botComment = comments.find(comment => comment.body == "${{ env.COMMENT }}")
            if (botComment) {
              console.log("PR Comment already made")
            } else {
              console.log("Add PR Comment")
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: `${{ env.COMMENT }}`
            }
  
      - name: Fail PR if versions not matching
        if: ${{ contains(env.COMMENT, '❌') }}
        run: exit 1
